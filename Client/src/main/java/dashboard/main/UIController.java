package dashboard.main;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import Entities.Commande;
import Entities.Zone;
import Interfaces.IRefiningServiceRemote;
import Interfaces.IZoneServiceRemote;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;

public class UIController implements Initializable {

    private double xOffset = 0;
    private double yOffset = 0;
    @FXML
    private AnchorPane parent;
	
	@FXML
	private Pane ContentArea;
	@FXML
    private Label total;

    @FXML
    private Label L2;
    @FXML
    private Label NonValide;
    @FXML
    private Label L3;


	// Event Listener on Label.onMouseClicked
	  String jndiName1="PI-ear/PI-ejb/ZoneServiceImpl!Interfaces.IZoneServiceRemote";
	  Context context1;
	  String jndiName="PI-ear/PI-ejb/RefiningServiceImpl!Interfaces.IRefiningServiceRemote";
	    Context context;
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
   
    	try {
			context1 = new InitialContext();
			IZoneServiceRemote  proxy2;
			
			context= new InitialContext();
			IRefiningServiceRemote  proxy;
		  	 
		    proxy=(IRefiningServiceRemote) context.lookup(jndiName);
			
			 
		  
		       
		
		     proxy2=(IZoneServiceRemote) context1.lookup(jndiName1);
		     List<Zone> zones = new ArrayList<>();
		     zones=proxy2.AfficherLesZones();
		     
			 
			int t=0;
			for(Zone zone : zones)
			{  
				t = t +zone.getTotal();
				
				total.setText(" " +t+" Barrels of Oil ");
			}
			
			  List<Commande> commandes = new ArrayList<>();
		      commandes=proxy.findCommandes();
		      int s=0;
		     for(Commande c : commandes)
		     {
		    	
		    	 L2.setText(""+proxy.Commande_valide()+"/"+commandes.size());
		    	 NonValide.setText(String.valueOf(commandes.size()-proxy.Commande_valide()));
		    	  s=s+c.getQte_D()+c.getQte_G()+c.getQte_M();
		    	 L3.setText(""+s+" Litres ");
		     }
		     
		     
		     
		     
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

        makeStageDrageable();
    }

    public Pane getContentArea() {
		return ContentArea;
	}

	public void setContentArea(Pane contentArea) {
		ContentArea = contentArea;
	}

	private void makeStageDrageable() {
        parent.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                xOffset = event.getSceneX();
                yOffset = event.getSceneY();
            }
        });
        parent.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                Launch.stage.setX(event.getScreenX() - xOffset);
                Launch.stage.setY(event.getScreenY() - yOffset);
                Launch.stage.setOpacity(0.7f);
            }
        });
        parent.setOnDragDone((e) -> {
            Launch.stage.setOpacity(1.0f);
        });
        parent.setOnMouseReleased((e) -> {
            Launch.stage.setOpacity(1.0f);
        });

    }
	@FXML
	public void open_zone(MouseEvent event) throws IOException {
		// TODO Autogenerated
		   Parent fxml = FXMLLoader.load(getClass().getResource("Zones.fxml"));
		  
	        ContentArea.getChildren().removeAll();
	        ContentArea.getChildren().setAll(fxml);
	        System.out.println(event.getPickResult());
	}
	@FXML
	public void open_dashboard(MouseEvent event) throws IOException {
		 Parent fxml = FXMLLoader.load(getClass().getResource("statistic.fxml"));
	        ContentArea.getChildren().removeAll();
	        ContentArea.getChildren().setAll(fxml);
	}
	@FXML
    void show_command(MouseEvent event) throws IOException {
	   Parent fxml = FXMLLoader.load(getClass().getResource("Commands.fxml"));
		  
	        ContentArea.getChildren().removeAll();
	        ContentArea.getChildren().setAll(fxml);
	       
    }
	  @FXML
	    void show_Non_valide(MouseEvent event) throws IOException {
		  Parent fxml = FXMLLoader.load(getClass().getResource("CommandsNonValide.fxml"));
		  
	        ContentArea.getChildren().removeAll();
	        ContentArea.getChildren().setAll(fxml);

	    }
	  @FXML
	    void show_statistic(MouseEvent event) throws IOException {
		  Parent fxml = FXMLLoader.load(getClass().getResource("OilStatistics.fxml"));
		  
	        ContentArea.getChildren().removeAll();
	        ContentArea.getChildren().setAll(fxml);

	    }

}
